-------------------------------------------------------------------- Definizione del problema

Problema: Dato un grafo direzionato G = (V, E) con pesi degli archi cvw trovare il percorso più 
          corto da s a t. Usare Dijkstra non sempre può dare un risultato, per esempio se gli archi
          sono negativi. Potremmo pensare di aggiungere una costante positiva ai pesi degli archi 
          potrebbe non funzionare.

Osservazione Se qualche percorso da s a t contiene un ciclo di costo negativo allora non esiste un
             percorso minimo da s a t. In caso contrario, esiste un percorso minimo da s a t che è 
             semplice, cioè nessun nodo compare due volte sul percorso.

Input: 
    - Un grafo direzionato G = (V, E) e un nodo t da raggiungere

Obiettivo:
    - Trovare il percorso più corto P da s a t.

-------------------------------------------------------------------- Definizione OPT

Definiamo OPT(i, v) = lunghezza del cammino più corto P per andare da v a t che consiste al più i archi.

    Caso 1:
        - Quando i > 0 e v ≠ t il percorso ottimo P deve contenere almeno un arco. Se (v, w) è il primo arco di P
          allora P' è formato da (v, w) e dal percorso più corto da (w, t) di al più i - 1 archi.
          OPT(i, v) = min[(v, w) ∈ E]{OPT(i-1, w) + cvw}. 
          Se non ci sono cicli di costo negativo allora OPT(i-1, v) = lunghezza del percorso più corta da v a t.
            
            | 0                                         se v = t
            |
OPT(i, v) = | ∞                                         se i = 0 e v ≠ t
            |
            | min[(v, w) ∈ E]{OPT(i-1, w) + cvw}        altrimenti

-------------------------------------------------------------------- Pseudocodice Bellman-Ford

Shortest-Path(G, t){
    foreach nodo v ∈ V{
        M[0, v] = ∞
        S[0, v] = ø                             // Indica che non ci sono da v a t di al più 0 archi. 
                                                // Servirà per produrre la stampa della soluzione ottima andando 
                                                // a ricostruire i percorsi minimi verso t
    }
    
    for i = 0 to n-1{
        M[i, t] = 0
        S[i, t] = t
    }
    
    for i = 1 to n-1{
        foreach nodo v ∈ V{
            M[i, v] = ∞
            S[i, v] = ø
            
            foreach arco (v, w) ∈ E{
                if M[i-1, w] + cvw < M[i, v]{
                    M[i, v] = M[i-1, w] + cvw
                    S[i, v] = w                     
                }   
            }
        }
    }

}

[Assumiamo che per ogni v esista un percorso da v a t --> n = O(m)]
Analisi: 
    - Tempo θ(mn) 
    - Spazio θ(n^2)
    
-------------------------------------------------------------------- Pseudocodice che produce la soluzione ottima

FindPath(i, v){                                                     // La prima volta è invocata con i = n-1 e v uguale al nodo
                                                                    // per il quale vogliamo computare il cammino minimo verso t
    if S[i, v] = ø
        print "Non esiste nessun percorso"
        return
    if v = t
        print t
        return

    print v
    FindPath(i-1, S[i, v])

}

Analisi:
    - Tempo O(n): perchè vengono effettuate al più n-1 chiamate e il tempo, 
                 ignorando le chiamate ricorsive, per ciascuna chiamata è O(1)

-------------------------------------------------------------------- Pseudocodice di Bellman-Ford miglioramento 1

 A. Prima di tutto modifichiamo l'algoritmo in modo che accetti come argomenti una sorgente s. 

B. Successivamente modifichiamo l'array M rendendolo undidimensionale. 
   Il nuovo array M[v] corrisponde al percorso da v a t più corto che abbiamo scoperto. per ogni i = 1, ..., n-1 computiamo
   M[v] per ogni v in questo modo:
   
       - M[v] = min{M[v], min[(v, w) ∈ E]{M(w) + cvw}}:
            B.1 computiamo per ogn arco (v, w) uscente da v la distanza M(w) + cvw che rappresenta la distanza più corta del percorso 
                più corto scoperto fino a quel momento per andare da v a t passando per (v, w). 
            B.2 Prendiamo il valore più piccolo e se questo valore è minore dell'attuale valore di M[v] aggiorniamo M[v] = M[w] + cvw. 
                                                           
C. Modifichiamo anche l'array S rendendolo unidimensionale. Per ogni vertice v in S[v] il successore di v, ovvero il primo nodo che segue 
   v lungo il percorso che va da v a t di costo M[v]. Se aggiorniamo M[v] =  M[w] + cvw allora aggiorniamo anche S[v] = w. 
 

Improved-Shortest-Path_1(G, t){
    foreach nodo v ∈ V{
        M[v] = ∞
        MA[v] = ∞
        S[v] = ø         
    }
    
    M[t] = 0
    MA[t] = 0
    S[t] = t
    
    for i = 1 to n-1{
        foreach nodo v ∈ V{
            foreach arco (v, w) ∈ E{
                if M[ w] + cvw < M[v]{
                    M[v] = MA[w] + cvw
                    S[v] = w                     
                }  
            }
            MA[v] = M[v]   
        }
    }
}

-------------------------------------------------------------------- Pseudocodice di Bellman-Ford miglioramento 2

Possiamo fare un'ulteriore modifica, ovvero quella di considerare solo chi archi (v, w) per cui si ha che M[w] ha cambiato valore all'iterazione precedente.        utilizziamo l'array di appoggio MA per salvare questi valori.

Improved-Shortest-Path_2(G, s, t){
    foreach nodo v ∈ V{
        M[v] = ∞
        MA[v] = ∞
        S[v] = ø                          
    }
    
    M[t] = 0
    MA[t] = 0
    S[t] = t
    
    
    for i = 1 to n-1{
        foreach nodo w ∈ V{
        if M[w] è stato aggiornato nell'iterazione i- 1{  
            foreach arco (v, w) ∈ E{
                if M[i-1, w] + cvw < M[i, v]{
                    M[v] = MA[w] + cvw
                    S[v] = w  
                    MA[v] = M[v]
                    
                }
            }
        }
    }
}

-------------------------------------------------------------------- Pseudocodice di Bellman-Ford efficiente

Idea:
    quando in una certa iterazione i del for esterno l'algoritmo calcola M[v] va a considerare solo quei nodi w per cui
    esiste l'arco (v, w) e tali che M[w] è stato modificato nell'iterazione precedente.

Se non utilizziamo in array di appoggio, quando calcoliamo M[w] + cvw, siamo costretti ad usare i valori M[w] presenti in M. Quando
calcoliamo M[w] + cvw, il valore di M[w] potrebbe essere uguale al valore computato nell'iterazione i-1 o potrebbe già essere stato
aggiornato nell'iterazione i, anche più volte. Nel caso M[w] sia stato già modificato nell'iterazione i, allora M[w] conterrà la 
lunghezza di un percorso più corto rispetto al valore M[w] computato precedentemente. Di conseguenza M[v] potrebbe essere aggiornato 
con una valore più piccolo di quello che si sarebbe otteuto utilizzando il valore M[w] computato nell'iterazione precedente.

Quindi dopo ogni iterazione i, M[v] potrebbe contenere la lunghezza di un percorso per andare da v a t formato da più i archi. La
lunghezza di M[v] è sicuramente non più grande della lunghezza del percorso più corto per andare da v a t formato da al massimo i archi.
l'ultimo miglioramento elimina l'array di appoggio secondo questa osservazione.
    
L'algoritmo  efficiente realizza questa idea, in questo modo:
    scandisce ciascun nodo w del grafo e controlla se il valore M[w] è cambiato nell'iterazione precedente e solo in questo caso esamina 
    gli archi (v, w) entranti in v e per ciascuno di questi archi computa M[w] + cvw. ciò equivale a scandire tutti i nodi v e a controllare
    per ogni arco (v, w) uscente da v se M[w] è cambiato nell'iterazione precedente prima di calcolare M[w] + cvw


Push-based-Shortest-Path(G, s, t){
    foreach nodo v ∈ V{
        M[v] = ∞
        S[v] = ø                          
    }
    
    M[t] = 0
    S[t] = t
   
    for i = 1 to n-1{
        foreach nodo w ∈ V{
            if M[w] è stato aggiornato nell'iterazione precedente{  
                foreach nodo v take che l'arco (v, w) ∈ E {
                    if M[v] > M[w] + cvw  {
                        M[v] = MA[w] + cvw
                        S[v] = w  
                    }
                }
            }
        }
        
        if il valore di M[v] non è cambiato in questa iterazione i
            return M[s, t]
    }
    
    retunr M[s, t]
}

Analisi: 

    * Questo miglioramento porta ad una diminuzione dello spazio, dato che non bisogna portarsi due matrici dietro.
      Per il tempo in teoria rimane O(mn), ma in pratica l'algoritmo si comporta meglio. Possiamo interrompere le iterazioni non appena accade che 
      durante una certa iterazione i nessun valore di M[v] cambia

        - Spazio O(n).
        - Tempo O(mn) in teoria, in pratica è più efficiente

-------------------------------------------------------------------- FIN         

-------------------------------------------------------------------- Definizione del problema

Input: Un insieme di n job 1, 2, ..., n e un tempo wi > 0 associato ad ogni job. 
       Un limite w al tempo per il quale il processore può essere utilizzato.

Obiettivo: selezionare un sottoinsieme S degli n job tali che la sommatoria dei tempi di esecuzione si quanto
più grande possibile ma comunque minore uguale di w.

-------------------------------------------------------------------- Definizione OPT

Per esprimere il valore della soluzione ottima er un certo i in termini dei valori
della soluzione ottime per input più piccoli di i, dobbiamo introdurre un limite
al tempo totale da dedicare all'esecuzione dei job che precedono i.

Per ciascun j, consideriamo il valore della soluzione ottima per i job 1, ..., j con
il vincolo che il tempo necessario per eseguire i job non superi un certo w.

OPT(i, w): Valore della soluzione ottima per i job {1, ..., i} con limite w sul tempo di utilizzo del processore.
    Caso 1: La soluzione ottima per i primi i job, con limite di utilizzo w non include il job i. In questo
            caso la soluzione ottima è OPT(i, w) = OPT(i-1, w).

    Caso 2: La soluzione ottima per i primi i job, con limite di utilizzo w include il job i. In questo caso
            la soluzione ottima è OPT(i,w)= wi + OPT(i-1, w-wi).

La soluzione ottima per i primi i job con limite di utilizzo w va ricercata tra le soluzioni ottime per i 
due casi. Questo però se i > 0 e wi <= 2.

Se i = 0 banalmente si ha OPT(i, w) = 0. Se wi > w è possibile solo il caso 1 perchè il job i non può far parte
della soluzione in quanto richiede più tempo di quello a disposizione.

         | 0                                 se i=0
         |
OPT(J) = | OPT(i-1, w)                        se wi > w  
         |
         | max{ OPT(i-1, w), wi + OPT(i-1, w-wi)} Altrimenti

-------------------------------------------------------------------- Pseudocodice che produce il valore della soluzione ottima

#Algoritmo per il calcolo della soluzione al problema del Subset Sum: 
    * La versione iterativa si computa la soluzione in modo bottom-up.
    * Si riempie un array bodimensionale nxw a partire dalle locazioni di indice di riga i più piccolo.
    
SubsetSum(n, [w1, ..., wn], W){
    for(w = 0 to W){
        M[0, w]=0
    }

    for(i = 1 to n){
        for(w = 0 to W){
            if(wi > w){
                M[i, w] = M[i-1, w]
            }else{
                M[i,w] = max{M[i-1, w], wi + M[i-1, w-wi]}
            }
        }
    }
    return M[n,W]
}

Analisi: Non è polinomiale nella dimensione dell'input tempo = θ(nW). 
Pseudo-Polinomiale: L'algoritmo è efficiente quando W ha un valore ragionevolmente piccolo.

#Algoritmo ricorsivo per il calcolo del Subset Sum utilizzando la Memoization:

for (i = 0 to n){
    for (w = 0 to W){
        M[i, w] = empty                                                    // Creazione dell'array globale
    }
}

SubsetSum(i, w){
    if (i = 0){                                                             // La prima volta invocata con i = n e w = W
        M[i, w] = 0
    }
    if (M[i, w] ≠ empty){
        return M[i, w]
    }
    if (wi > w){
        M[i, w]= SubsetSum(i-1, w)
    }else{
        M[i, w]= max{SubsetSums(i-1, w), wi + SubsetSums(i-1, w-wi)
    }
    return M[i, w]
}

-------------------------------------------------------------------- Pseudocodice che produce la soluzione ottima

#Algoritmo ricorsivo che stampa la soluzioen di Subset Sum:

[Invochiamo Ssubset Sum]

FindSubset(i,w){
    if(i = 0){                                                              // La prima volta invocata con i = n e w = W
        return null
    }
    if (M[i, w] = M[i-1, w]){
        FindSubset(i-1, w)
    }else{
        print i
        FindSubset(i-1, w-wi)
    }
}

Analisi: Tempo O(n)

-------------------------------------------------------------------- FIN


-------------------------------------------------------------------- Definizione del problema

Input: 
     - un array A non ordinato con un inizio sx e una fine dx.

Obiettivo: 
     - Vogliamo ordinare l'array A.

Funzionamento:
      * Decomposizione: se la sequenza ha almeno due elementi, scegli un elemento pivot e dividi la sequenza in
                        due sotto-sequenza in modo tale che la prima contenga elementi minori o uguali al pivot
                        e la seconda gli elementi maggiori o uguali al pivot.
      * Ricorsione: Ordina ricorsivamente le due sotto-sequenze.
      * Ricombinazione: non occorre fare alcun lavoro di ricombinazione.
                   
-------------------------------------------------------------------- Pseudocodice

QuickSort(A, sx, dx){
    if(sx < dx){
        scegli un pivot px nell'intervallo [sx,...,dx]
        indiceFinalePivot = Distribuzione(A, sx, px, dx)
        QuickSort(A, sx, indiceFinalePivot-1)
        QuickSort(A, indiceFinalePivot+1, dx)
    }
}

-------------------------------------------------------------------- Distribuzione

Algoritmo:
    * Scambia gli elementi A[px] e A[dx], se A[px] è diverso da A[dx]
    * Usa due indici i e j per scandire il segmento: i parte da sx e scorre verso destra, j parte da dx - 1 e scorre verso 
      sinistra fino a quando i <= j.
    * Ogni volta che si ha un A[i] <= pivot o A[j] >= pivot, scambia A[i] con A[j] e poi riprende la scansione.
    * Alla fine della scansione, Distribuzione posiziona il pivot nella posizione corretta [per posizione corretta si intende il suo rango].
  
Pseudocodice:

     Distribuzione(A, sx, px, dx):
         if(A[px] != A[dx])  Scambia(A[px], A[dx]);

         i = sx;
         j = dx - 1;

         while(i <= j){

             while((i <= j) && (A[i] <= A[dx])) i = i + 1;
             while((i <= j) && (A[j] >= A[dx])) j = j - 1;

             if(i < j){
                 Scambia(A[i]), A[j]);

                 i = i + 1;
                 j = j - 1;
             }

         }
         if(i != dx) Scambia(A[i], A[dx]);
         return i;


     Scambia(a[i], a[j]):
         temp = a[j];
         a[j] = a[i];
         a[i] = temp;

Analisi:
    - Dobbiamo stimare il numero di iterazioni eseguite complessivamente dai due while interni.
         1. primo while = numero di confronti tra un elemento A[i] con il pivot
         2. secondo while = numero di confronti tra un elemento A[j] con il pivot
         3. Dopo ogni confronto di A[i] con il pivot:
             3.a viene incrementeato i di 1
             3.b il while esterno termina dopo al più un'interazione
         4. Dopo ogni confronto di A[j] con il pivot:
             4.a viene incrementeato j di 1
             4.b il while esterno termina dopo al più un'interazione
         5. Dopo ogni interazione di ciascuno dei while interni, tranne per l'ultima, 
            viene confrontato un nuovo elemento con il pivot.
         6. Il numero totale di confronti con il pivot è quindi al più n - 2. 
            Il numero di iterazioni complessive dei due while è di n - 2.
         7. Tempo di esecuzione: O(n)


-------------------------------------------------------------------- Relazione di ricorrenza

Analisi:
    - Caso base: se il segmento su cui opera l'algoritmo contiene un solo elemento allora l'algoritmo esegue un
                 numero costante di operazioni per cui il costo è <= c per una certa costante c positiva;
    - Passo ricorsivo: il costo in questo caso è dato dal costo lineare di distribuzione più il costo delle due
                       chiamate ricorsive effettuate: sul segmento composto dagli elementi di rango minori del pivot e 
                       dal segmento composto dagli elementi di rango maggiori del pivot. Il costo in questo caso è al più
                       pari a cn (per una certa costance c > 0) più il costo delle chiamate ricorsive.

Sia r il rango dell'elemento pivot, la relazione di ricorrenza che esprime il tempo di esecuzione è la seguente:

        | c0                 se n<=1 
T(n) <= |
        | T(r-1)+T(n-r)+cn   altrimenti
        
-------------------------------------------------------------------- Analisi Caso Pessimo

Nel caso pessimo il pivot è tutto a sinistra (r = 1) oppure è tutto a destra (r = n), la relazione diventa:

        T(n) <= T(n - 1) + T(0) + cn <= T(n - 1) + c'n        per un'opportuna costante c' positiva;

Applicando iterativamente la relazione di ricorrenza:

        T(n) <= T(n - i) + [Somma per j che va da 0 a (i-1) di] c'(n-j)

Sostituiamo i = n - 1, otteniamo:
        
        T(n) <= T(1) + [Somma per j che va da 0 a (n-2) di] c'(n-j) <= c0 + [Somma per j che va da 0 a (n-1-1) di] c'j <=
                <= c0 + [**] c'(n+1)n/2 - c' = O(n^2)
                
[**]: Compare la sommatoria dei primi n numeri, nell'ultimo passaggio abbiamo un - c' perchè la sommatoria parte da 1
       
Tempo di esecuzione:

     QuickSort caso pessimo:     T(n) = O(n^2)

     QuickSort caso ottimo:      T(n) = O(n log n)

     QuickSort caso medio:       T(n) = O(n log n)

     QuickSort Tempo Medio di esecuzione: T(n) = O(n log n)

-------------------------------------------------------------------- FIN

-------------------------------------------------------------------- Definizione del problema

Input: un array a di n elementi distinti con un inizio sx e una fine fx.

Obiettivo: Selezionare l'elemento di rango r in un array a di n elementi distinti (evitando di dover ordinare a).

Decomposizione: se la sequenza sul quale opera l'algoritmo contiene almeno due elementi si scegli il pivot 
                nell'intervallo [sx, dx]. la funzione Distribuzione ci permette di trovare il rango del pivot, posizionando
                tutti gli elementi di rango minore alla sua sinistra e tutti gli elementi di rango maggiore alla sua destra.
                
Ricorsione: si continua la ricerca dell'elemento di rango r nel solo segmento che lo contiene.

Ricombinazione: non c'è nessun lavoro di ricombinazione
               
-------------------------------------------------------------------- Pseudocodice

QuickSelect(a, sx, rango, dx){
    if(sx == dx) return a[sx];
    else{
        scegli un pivot px nell'intervallo [sx, ..., dx];
        indiceFinalePivot = Distribuzione(a, sx , px, dx);
        
        if(rango-1 == indiceFinalePivot) return a[indiceFinalePivot];
        else{
            if(rango-1 < indiceFinalePivot) return QuickSelect(a, sx, rango, indiceFinalePivot-1);
            else return QuickSelect(a, indiceFinalePivot+1, rango, dx);
        }
    }
}

-------------------------------------------------------------------- Distribuzione

Algoritmo:
    * Scambia gli elementi a[px] e a[dx], se px è diverso da dx
    * Usa due indici i e j per scandire il segmento: i parte da s e scorre verso destra, j parte da d - 1 e scorre verso 
      sinistra fino a quando i <= j.
    * Ogni volta che si ha un a[i] > pivot e a[j] < pivot, scambia a[i] con a[j] e poi riprende la scansione.
    * Alla fine della scansione, Distribuzione posiziona il pivot nella posizione corretta.
  
Analisi:
    - Dobbiamo stimare il numero di iterazioni eseguite complessivamente dai due while interni.
    1. primo while = numero di confronti tra un elemento a[i] con il pivot
    2. secondo while = numero di confronti tra un elemento a[j] con il pivot
    3. Dopo ogni confronto di a[i] con il pivot:
        3.a viene incrementeato i di 1
        3.b il while esterno termina dopo al più un'interazione
    4. Dopo ogni confronto di a[j] con il pivot:
        4.a viene incrementeato j di 1
        4.b il while esterno termina dopo al più un'interazione
    5. Dopo ogni interazione di ciascuno dei while interni, tranne per l'ultima, 
       viene confrontato un nuovo elemento con il pivot.
    6. Il numero totale di confronti con il pivot è quindi al più n - 2. 
       Il numero di iterazioni complessive dei due while è di n - 2.
    7. Tempo di esecuzione: O(n)


-------------------------------------------------------------------- Pseudocodice:

Distribuzione(a, sx, px, dx):
    if(a[px] != a[dx])  Scambia(a[p], a[dx]);

    i = sx;
    j = dx - 1;

    while(i <= j){
    
        while((i <= j) && (a[i] <= a[dx])) i = i + 1;
        while((i <= j) && (a[j] >= a[dx])) j = j - 1;
        
        if(i < j){
            Scambia(a[i]), a[j]);
            
            i = i + 1;
            j = j - 1;
        }
        
    }
    if(i != dx) Scambia(a[i], a[dx]);
    return i;

Scambia(a[i], a[j]):
    temp = a[j];
    a[j] = a[i];
    a[i] = temp;

-------------------------------------------------------------------- Relazione di ricorrenza

La relazione di ricorrenza che esprime il tempo di esecuzione è la sequente:
        | c0                       se n=1
T(n) <= | c1n                      se n>1 e rp=r-1
        | max{T(rp-1), T(n-rp)} + cn  altrimenti

Analisi:
    - Caso base: se il segmento sul quale opera l'algoritmo contiene un solo elemento allora l'algoritmo esegue un
                 numero costante di operazioni per cui il costo è <= c per una certa costance c positiva;
                 Se l'indice restituito da Distribuzione(a, sx, px, dx) è uguale a r - 1, l'algoritmo termina. 
                 Il costo in questo caso è dato dal costo lineare di distribuzione più il costo costante delle 
                 altre istruzioni per cui il costo totale è z= c1n, dove c1 > 0 è una certa costante
    - Passo ricorsivo: il costo in questo caso è dato dal costo lineare di distribuzione più il costo della 
                       chiamata ricorsive effettuata sul segmento composto dagli elementi minori del pivot oppure 
                       dal segmento composto dagli elementi maggiori del pivot. Il costo in questo caso è al più
                       pari a cn (per una certa costance c > 0) più il costo delle chiamate ricorsive.
               
-------------------------------------------------------------------- Analisi Caso Pessimo

Nel caso pessimo il pivot è tutto a sinistra (rp = 1) e r > rp oppure è tutto a destra (rp = n)
e r > rp. In entrambi i casi la relazione diventa:

        T(n) <= T(n - 1) + T(0) + cn <= T(n - 1) + cn;        per un'opportuna costante c;

Applicando iterativamente la relazione di ricorrenza:

        T(n) <= T(n - i) + [Somma per j che va da (n-i+1) a n di] cj;

Sostituiamo i = n - 1, otteniamo:
        
        T(n) <= T(1) + [Somma per j che va da 2 a n di] cj 
                <= c0 + [Somma per j che va da 2 a (n) di] cj
                    <= c0 + [**] c(n+1)n/2 - c = O(n^2)
                
[**]: Compare la sommatoria dei primi n numeri, nell'ultimo passaggio abbiamo un - c' perchè la sommatoria parte da 1
     
-------------------------------------------------------------------- Tempo di Esecuzione

* QuickSelect caso pessimo: T(n) = O(n^2)

* QuickSelect caso ottimo: T(n) = O(n)

* QuickSelect caso medio: T(n) = O(n)

* QuickSelect randomizzato tempo medio: T(n) = O(n)

-------------------------------------------------------------------- FIN

------------------------------------------------------------------------------------ Definizione del problema

Input: 
    - un array V ordinato con un inizio sx e una fine dx e un elemento x.

Obiettivo: 
    - Restituire la posizione dell'elemento x se esiste all'interno dell'arrray.

Funzionamento:
  * Caso Base: Quando il segmento analizzato contiene al più un elemento.
  * Decomposizione: Viene calcolato l'indice centrale mid e controllato se x è maggiore o minore di V[mid].
  * Ricorsione e Ricombinazione: Se x < V[mid] cerca l'elemento x nel segmento di sinistra, se x > V[mid] 
                                 si cerca l'elemento x nel segmento di destra. Non occorre nessun lavoro 
                                 di ricombinazione. 
                                 

------------------------------------------------------------------------------------ Pseudocodice

RicercaBinaria(V, x, sx, dx){
    if(sx > dx){
        return -1
    }

    mid = (sx + dx)/2
    if(x == V[mid]){
        return mid;
    }

    if(sx == dx){
        return -1
    }

    if(x < V[mid]){
        RicercaBinaria(V, x, sx, mid-1)
    }else{
        RicercaBinaria(V, x, mid+1, dx)
    }
}

------------------------------------------------------------------------------------ Relazione di ricorrenza

Analisi:
    - Caso base: se il segmento su cui opera l'algoritmo contiene al più un elemento oppure l'elemento cercato è proprio 
                 quello nella posizione centrale, allora l'algoritmo esegue un numero costante di operazioni per cui il 
                 costo è <= c0 (c positiva)
    - Passo ricorsivo: il costo in questo caso è pari a una costante c (c positiva) più il tempo richiesto dalla ricerca 
                       dell'elemento in un segmento di dimensione al più pari alla metà di quello attuale.

La relazione di ricorrenza che esprime il tempo di esecuzione è la seguente:

        | c0            se n<=1 oppure K è l'elemento centrale
T(n) <= |
        | T(n/2) + c    altrimenti

Tempo di esecuzione:
    - T(n) <= O(log n)

------------------------------------------------------------------------------------ FIN

-------------------------------------------------------------------- Definizioni

Grafo bipartito:
    - un grafo bipartito è un grafo non direzionato, l'insieme dei nodi può essere partizionato
      in due sottoinsiemi X e Y tali che ciasciun arco del grafo ha una delle due estremità in 
      X e l'altra in Y.


-------------------------------------------------------------------- Lemma

Lemma: 
    - Se un grafo G è bipartito, non può contenere cicli dispari, cioè un ciclo 
      formato da un numero di nodi dispari.

Dimostrazione: 
    - Graficamente in un ciclo dispari non è possibile colorare, con due colori, in modo alternato i nodi
      che lo compongono.

-------------------------------------------------------------------- Osservazione

Osservazione: Sia G un grafo connesso e siano L0,...,Lk i livelli prodotti dall'esecuzione della visita BFS a partire dal nodo s:

    - Caso 1: Nessun arco di G collega due nodi sullo stesso livello --> Grafo bipartito
    - Caso 2: Un arco G collega due nodi sullo stesso livello --> Grafo non bipartito

Caso 1 dimostrazione: In questo caso non ci sono archi tra nodi dello stesso livello, allora tutti gli archi del grafo collegano nodi 
                      in livelli successivi. Possiamo colorare di rosso i livelli di indice pari, in questo modo ho che le estreemità 
                      di ogni arco sono di colore diverso.

Caso 2 dimostrazione: In questo caso ci basta dimostrare che esiste un ciclo dispari nel grafo. Supponiamo che esista un arco(x, y) 
                      appartente al livello Lj. Indichiamo con z l'antenato comune più prossimo a x e y. Sia Li il livello dove si trova z.
                      Possiamo ottenere un ciclo dispari del grafo prendendo il percorso d z a x (j-i archi), quello da z a y (j-i archi) e l'arco (x, y), 
                      in totale il ciclo contiene 2(j - i) + 1 archi.

-------------------------------------------------------------------- Pseudocodico

Algoritmo che determina se un grafo è Bipartito:
    - Modifichiamo la BFS in modo da poter asseganre i due colori ed eseguiamo al termine della visita una scansione sugli archi
    - Il grafo g è implementato con liste di adiacenza

BFS(s){
    Poni Discovered[s]=true e Discovered[u]=false per tutti gli altri nodi u del grafo
    inizializza L[0] in modo che contenga solo s  
    Poni il contatore dei livelli i = 0
    inizializza bfsTree come albero vuoto. 
    while(i<n-2){
        inizializza L[i+1]
        foreach (nodo u in L[i]){
            foreach (arco(u,v) incidente su v){
                if(Discovered[v] == false){
                    Discovered[v] == true;
                    Aggiungi v alla lista L[i+1]
                    Aggiungi l'arco (u, v) all'albero bfsTree  
                    if((i+1) % 2 == 0){
                        Color[v] = rosso
                    }else{
                        Color[v] = blu
                    }
                }
            }
        }
        i=i+1
    }
    
    return IsBipart(Color, bfsTree)
}


IsBipart(Color, bfsTree){
    foreach (arco (u, v) in bfsTree){             //Tempo O(m)
        if(color[u] == color[v]) return false
    }
    
    return true
}


Analisi: 
         - l'aggiunta delle modifiche non cambia il tempo di esecuzione. L'assegnazione del colore impiega tempo costante O(1) per ogni nodo, 
           quindi al più O(n). L'algoritmo che analizza tutti gli archi per controllare se due estremi hanno lo stesso colore impiega al più O(m).
         
Tempo totale: 
            - O(n+m)


-------------------------------------------------------------------- FIN

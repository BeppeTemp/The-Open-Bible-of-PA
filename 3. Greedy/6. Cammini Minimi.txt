----------------------------------------------------------------------------------Definizione del Problema

Input:
  * Grafo direzionato G=(V,E)
  * Una memoria cache con capacità di memorizzare k elementi.
  * Per ogni arco e, le=valore numerico associato ad e (lunghezza o peso).
  * s=sorgente

Obbiettivo: Trovare i percorsi direzionati più corsto da s verso tutti gli altri nodi.

-----------------------------------------------------------------------------------------------Definizioni

Definizione: Per ogni percorso direzionato P. l(P)=somma delle lunghezze degli archi in P (Costo di P).

-------------------------------------------------------------------------------------Varianti del problema

Single Source Shortest Paths: Determinare il cammino minimo da un dato vertice sorgente s ad ogni altro 
vertice.

Single Destination Shortest Paths: Determinare i cammini minimi ad un dato vertice destinazione t da tutti 
gli altri vertici. (può essere ridotta alla prima variante invertendo il costo degli archi).

Single-Pair Shortest Path: Per una data coppia di vertici u e v determinare un cammino minimo da un dato
vertice u a v.

All Pairs Shortest Path: Per ogni coppai di vertici u e v, determinare un cammino minimo da u a v.

----------------------------------------------------------------------------------------------Osservazione

Cicli Negativi: in caso di un ciclo negativo non è possibile definire un percorso minimo.

-------------------------------------------------------------------------------------Algoritmo di Dijkstra

Funzionamento:
  * Ad ogni passo mantiene l'insieme S dei nodi esplorati, ovvero quelli per cui è già stata calcolata la
    distanza minima da s.
  * Inizializzo S={s},d(s)=0.
  * Ad ogni passo, seglie tra i nodi non ancora in S ma adiacent a qualche di S, quello che può essere
    raggiunto in modo più economico (scelta greedy).
  * Aggiunge v ad S e pone d(v)=d'(v).
  * d'(v) rappresenta la lunghezza del percorso più corto da s a v tra quelli che passano solo per nodi
    di S.

Psudocodice:
Dijkstra(G,l){
    Sia s l'insieme dei nodi esplorati
        foreach (nodo u in S){
            conservane la distanza d(u)
        }
    inizializza S={s} 
    d(s)=0
    while(S!=V){
        seleziona un nodo che non appartiene a S con almeno un vertice in S il quale
            la distanza è il minimo possibile
        aggiungi v a S e definisci d(v)=d'(v)
    }
}

---------------------------------------------------------------------------------------------------------

 